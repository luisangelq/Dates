{"version":3,"sources":["components/Form.js","components/Schedule.js","App.js","serviceWorker.js","index.js"],"names":["Form","createSchedule","useState","patient","family","date","time","symptoms","schedule","setSchedule","error","setError","handleChange","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","type","placeholder","onChange","Schedule","deleteSchedule","onClick","App","initialSchedules","JSON","parse","localStorage","getItem","schedules","getSchedules","useEffect","setItem","stringify","newSchedules","filter","title","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f24f49cd.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Form = ({createSchedule}) => {\r\n  //Create state Dates form\r\n  const [schedule, setSchedule] = useState({\r\n    patient: \"\",\r\n    family: \"\",\r\n    date: \"\",\r\n    time: \"\",\r\n    symptoms: \"\"\r\n  });\r\n\r\n  //error state form\r\n  const [ error, setError] = useState(false)\r\n\r\n  //update function for inputs\r\n  const handleChange = (e) => {\r\n    setSchedule({\r\n      ...schedule,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  //substract values\r\n  const { patient, family, date, time, symptoms } = schedule;\r\n\r\n  //when the user hit button from form\r\n  const submitDate = (e) => {\r\n    e.preventDefault();\r\n\r\n    //Validate\r\n    if (\r\n      patient.trim() === \"\" ||\r\n      family.trim() === \"\" ||\r\n      date.trim() === \"\" ||\r\n      time.trim() === \"\" ||\r\n      symptoms.trim() === \"\"\r\n    ) {\r\n      setError(true)\r\n      return;\r\n    }\r\n      \r\n    setError(false)\r\n    \r\n    //Assigment id\r\n    schedule.id = uuidv4();\r\n\r\n    //Create the date\r\n    createSchedule(schedule);\r\n\r\n    //restart form\r\n    setSchedule({\r\n      patient: \"\",\r\n    family: \"\",\r\n    date: \"\",\r\n    time: \"\",\r\n    symptoms: \"\"\r\n    })\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2>Create Date</h2>\r\n\r\n      {error ? <p className=\"alerta-error\">All fields are required</p> : null}\r\n\r\n      <form onSubmit={submitDate}>\r\n        <label>Patient Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"patient\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Full Name\"\r\n          onChange={handleChange}\r\n          value={patient}\r\n        />\r\n\r\n        <label>Family member's name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"family\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Full Name\"\r\n          onChange={handleChange}\r\n          value={family}\r\n        />\r\n\r\n        <label>Date</label>\r\n        <input\r\n          type=\"date\"\r\n          name=\"date\"\r\n          className=\"u-full-width\"\r\n          onChange={handleChange}\r\n          value={date}\r\n        />\r\n\r\n        <label>Time</label>\r\n        <input\r\n          type=\"time\"\r\n          name=\"time\"\r\n          className=\"u-full-width\"\r\n          onChange={handleChange}\r\n          value={time}\r\n        />\r\n\r\n        <label>Symptoms</label>\r\n        <textarea\r\n          className=\"u-full-width\"\r\n          name=\"symptoms\"\r\n          onChange={handleChange}\r\n          value={symptoms}\r\n        ></textarea>\r\n\r\n        <button type=\"submit\" className=\"u-full-width button-primary\">\r\n          Add Date\r\n        </button>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nForm.propTypes = {\r\n  createSchedule: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Schedule = ({schedule, deleteSchedule}) => {\r\n\r\n    const {patient, family, date, time, symptoms} = schedule\r\n    return (\r\n        <div className=\"cita\">\r\n            <p>Person: <span>{patient}</span></p>\r\n            <p>Family Member: <span>{family}</span></p>\r\n            <p>date: <span>{date}</span></p>\r\n            <p>time: <span>{time}</span></p>\r\n            <p>Symptoms: <span>{symptoms}</span></p>\r\n\r\n            <button\r\n            className=\"button eliminar u-full-width\"\r\n            onClick={() => deleteSchedule(schedule.id)}\r\n            >Delete &times;</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nSchedule.propTypes = {\r\n    schedule: PropTypes.object.isRequired,\r\n    deleteSchedule: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Schedule;\r\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport Form from \"./components/Form\";\nimport Schedule from \"./components/Schedule\";\n\nfunction App() {\n\n  //local storage\n  let initialSchedules = JSON.parse(localStorage.getItem(\"schedules\"));\n  if(!initialSchedules) {\n    initialSchedules = [];\n  }\n\n  //dates array\n  const [schedules, getSchedules] = useState(initialSchedules);\n\n  useEffect(() => {\n    if(initialSchedules) {\n      localStorage.setItem(\"schedules\", JSON.stringify(schedules))\n    } else {\n      localStorage.setItem(\"schedules\", JSON.stringify([]));\n    }\n  }, [initialSchedules, schedules] )\n\n  //function for add new chedules\n  const createSchedule = (schedule) => {\n    getSchedules([...schedules, schedule]);\n  };\n\n  //Delete funtion\n  const deleteSchedule = (id) => {\n    const newSchedules = schedules.filter((schedule) => schedule.id !== id);\n    getSchedules(newSchedules);\n  };\n\n  //conditional message\n  const title =\n    schedules.length === 0\n      ? \"There aren't appointments\"\n      : \"Manage your appointments\";\n  return (\n    <Fragment>\n      <h1>Patient administrator</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Form createSchedule={createSchedule} />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{title}</h2>\n            {schedules.map((schedule) => (\n              <Schedule\n                key={schedule.id}\n                schedule={schedule}\n                deleteSchedule={deleteSchedule}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}